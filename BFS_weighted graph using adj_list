import queue,heapq
edges=[(0,1,4),(0,2,5),(1,3,8),(1,4,6),(2,5,3),(2,6,7),(3,7,5),(4,8,4),(5,8,6),(7,9,8),(8,9,3),(6,10,5),(7,11,7),(8,10,5)]

def adj_list(edges):
    dictionary = dict()
    for i in edges:
        if i[0] in dictionary:
            dictionary[i[0]].append([i[1],i[2]])
            # dictionary[i[0]].append([i[0][2]])
        else:
           dictionary[i[0]] = [[i[1],i[2]]]

        if i[1] in dictionary:
            dictionary[i[1]].append([i[0],i[2]])
        else:
            dictionary[i[1]] = [[i[0],i[2]]]
    return dictionary


#q6
# bfs for weighted graph
def weighted_bfs(source, edges):
    n = len(edges) 
    min_mat = []
    distance = [float('inf')] * 12  
    matrx = adj_mat(edges)
    
 
    heapq.heappush(min_mat, [0, source])
    distance[source] = 0
    
    while min_mat:
        current_dist, current_node = heapq.heappop(min_mat)
        
        for neighbor, edge_weight in matrx[current_node]:
            new_distance = current_dist + edge_weight
            
            if new_distance < distance[neighbor]:
                distance[neighbor] = new_distance
                heapq.heappush(min_mat, [new_distance, neighbor])
    
    return distance

print(weighted_bfs(0, edges))
